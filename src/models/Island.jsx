/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import { a } from "@react-spring/three";



import islandScene from '../assets/3d/underwater.glb';

const Island = ({isRotating, setisRotating, ...props}) => {
    const [currentStage, setCurrentStage] = useState(null); // Add this line
    const islandRef = useRef();

    const { gl, viewport } = useThree();
    const { nodes, materials } = useGLTF(islandScene);

    const lastX = useRef(0);
    const rotationSpeed = useRef(0);
    const dampingFactor = 0.99;

    const handlePointerDown = (e) => {
        e.stopPropagation();
        e.preventDefault();
        setisRotating(true);

        const clientX = e.touches ? e.touches[0].clientX : e.clientX;

        lastX.current = clientX;
    }

    const handlePointerUp = (e) => {
        e.stopPropagation();
        e.preventDefault();
        setisRotating(false);
    }

    const handlePointerMove = (e) => {
        e.stopPropagation();
        e.preventDefault();

        if (isRotating){
            const clientX = e.touches ? e.touches[0].clientX : e.clientX;

            const delta = (clientX - lastX.current) / viewport.width;

            islandRef.current.rotation.y += delta * 0.004 * Math.PI;
            lastX.current = clientX;
            rotationSpeed.current = delta * 0.004 * Math.PI;
        }
    }

    const handleKeyDown = (e) => {
        if (e.key === "ArrowLeft") {
            if(!isRotating) setisRotating(true);
            islandRef.current.rotation.y += 0.01 * Math.PI;    
        } else if (e.key === "ArrowRight") {
            if(!isRotating) setisRotating(true);
            islandRef.current.rotation.y -= 0.01 * Math.PI;  
        }
    }

    const handleKeyUp = (e) => {
        if (e.key === "ArrowLeft" || e.key === "ArrowRight") {
            setisRotating(false);
        }
        
    }

    useFrame(() => {
        if (!isRotating) {
            rotationSpeed.current *= dampingFactor;
            if(Math.abs(rotationSpeed.current) < 0.0001){
                rotationSpeed.current = 0;
            }
            islandRef.current.rotation.y += rotationSpeed.current;
            
        } else {
            const rotation = islandRef.current.rotation.y;
            const normalizedRotation = ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);
            switch (true) {
                case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
                  setCurrentStage(4);
                  break;
                case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
                  setCurrentStage(3);
                  break;
                case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
                  setCurrentStage(2);
                  break;
                case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
                  setCurrentStage(1);
                  break;
                default:
                  setCurrentStage(null);
              }
        }
        
    })

    useEffect(() => {
        const canvas = gl.domElement;
        canvas.addEventListener("pointerdown", handlePointerDown);
        canvas.addEventListener("pointerup", handlePointerUp);
        canvas.addEventListener("pointermove", handlePointerMove);
        document.addEventListener("keydown", handleKeyDown);
        document.addEventListener("keyup", handleKeyUp);

        return () => {
            canvas.removeEventListener("pointerdown", handlePointerDown);
            canvas.removeEventListener("pointerup", handlePointerUp);
            canvas.removeEventListener("pointermove", handlePointerMove);
            document.removeEventListener("keydown", handleKeyDown);
            document.removeEventListener("keyup", handleKeyUp);
        }
    }, [gl, handlePointerDown, handlePointerUp, handlePointerMove])
    
    return (
        <a.group ref={islandRef} {...props}>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cylinder_1.geometry}
                material={materials.Ground}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cylinder_2.geometry}
                material={materials.Material_96}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cylinder_3.geometry}
                material={materials.Material_91}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cylinder_4.geometry}
                material={materials["02___Default"]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cylinder_5.geometry}
                material={materials["Material.003"]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cylinder_6.geometry}
                material={materials.mat20}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cylinder_7.geometry}
                material={materials.mat13}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cylinder_8.geometry}
                material={materials["Material.002"]}
            />
        </a.group>
    );
};

export default Island;
